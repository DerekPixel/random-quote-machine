{"version":3,"sources":["Components/NewQuote.jsx","Components/TweetQuote.jsx","Components/Buttons.jsx","Components/Author.jsx","Components/Text.jsx","Components/TextAndAuthor.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["NewQuote","onClick","id","TweetQuote","href","target","Buttons","className","Author","author","Text","text","TextAndAuthor","App","useState","quote","setQuote","setAuthor","NewQuoteAndAuthor","req","XMLHttpRequest","open","setRequestHeader","send","onload","json","JSON","parse","response","randoNumber","Math","floor","random","quotes","length","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAUeA,EARE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACjB,OACE,wBAAQC,GAAG,YAAYD,QAASA,EAAhC,yBCOWE,EAVI,WACjB,OACE,iCACE,mBAAGD,GAAG,cAAcE,KAAK,mCAAmCC,OAAO,SAAnE,6BCQSC,EATC,SAAC,GAAe,IAAdL,EAAa,EAAbA,QAChB,OACE,sBAAKM,UAAU,UAAf,UACE,cAAC,EAAD,CAAUN,QAASA,IACnB,cAAC,EAAD,QCESO,EARA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACE,qBAAKP,GAAG,SAAR,SACGO,KCKQC,EARF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACb,OACE,qBAAKT,GAAG,OAAR,SACGS,KCQQC,EATO,SAAC,GAAoB,IAAnBD,EAAkB,EAAlBA,KAAMF,EAAY,EAAZA,OAC5B,OACE,sBAAKF,UAAU,gBAAf,UACE,cAAC,EAAD,CAAMI,KAAMA,IACZ,cAAC,EAAD,CAAQF,OAAQA,QCiCPI,MAlCf,WAAgB,IAAD,EAEWC,mBAAS,0BAFpB,mBAERC,EAFQ,KAEDC,EAFC,OAGaF,mBAAS,IAHtB,mBAGRL,EAHQ,KAGAQ,EAHA,KAKPC,EAAoB,WACxB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,8DAA8D,GAC9EF,EAAIG,iBAAiB,SAAU,oBAC/BH,EAAII,OACJJ,EAAIK,OAAS,WAEX,IAAMC,EAAOC,KAAKC,MAAMR,EAAIS,UAEtBC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWP,EAAKQ,OAAOC,QAE3DlB,EAASD,EAAQU,EAAKQ,OAAOJ,GAAalB,MAC1CM,EAAUR,EAASgB,EAAKQ,OAAOJ,GAAapB,UAQhD,OAJA0B,OAAOX,OAAQ,WACbN,KAIA,sBAAKhB,GAAG,YAAR,UACE,cAAC,EAAD,CAAeS,KAAMI,EAAON,OAAQA,IACpC,cAAC,EAAD,CAASR,QAASiB,QCtBTkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7bd7fecb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NewQuote = ({onClick}) => {\r\n  return (\r\n    <button id='new-quote' onClick={onClick} >\r\n      New Quote!\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default NewQuote\r\n","\r\nconst TweetQuote = () => {\r\n  return (\r\n    <button>\r\n      <a id='tweet-quote' href='https://twitter.com/intent/tweet' target='_blank'>\r\n        Tweet Quote!\r\n      </a>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default TweetQuote\r\n","import NewQuote from \"./NewQuote\"\r\nimport TweetQuote from \"./TweetQuote\"\r\n\r\nconst Buttons = ({onClick}) => {\r\n  return (\r\n    <div className='buttons'>\r\n      <NewQuote onClick={onClick}/>\r\n      <TweetQuote />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Buttons\r\n","\r\nconst Author = ({author}) => {\r\n  return (\r\n    <div id='author'>\r\n      {author}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Author\r\n","\r\nconst Text = ({text}) => {\r\n  return (\r\n    <div id='text'>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Text\r\n","import Author from \"./Author\"\r\nimport Text from \"./Text\"\r\n\r\nconst TextAndAuthor = ({text, author}) => {\r\n  return (\r\n    <div className='textandauthor'>\r\n      <Text text={text}/>\r\n      <Author author={author}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextAndAuthor\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport Buttons from './Components/Buttons';\nimport TextAndAuthor from './Components/TextAndAuthor';\n\n\nfunction App() {\n\n  var [quote, setQuote] = useState('Quote API is Broken :(');\n  var [author, setAuthor] = useState('');\n\n  const NewQuoteAndAuthor = () => {\n    const req = new XMLHttpRequest();\n    req.open('GET', 'https://goquotes-api.herokuapp.com/api/v1/random?count=500', true);\n    req.setRequestHeader('Accept', 'application/json');\n    req.send();\n    req.onload = () => {\n\n      const json = JSON.parse(req.response);\n\n      const randoNumber = Math.floor(Math.random() * json.quotes.length);\n      \n      setQuote(quote = json.quotes[randoNumber].text);\n      setAuthor(author = json.quotes[randoNumber].author);\n    }\n  }\n\n  window.onload= () => {\n    NewQuoteAndAuthor();\n  }\n\n  return (\n    <div id='quote-box'>\n      <TextAndAuthor text={quote} author={author} />\n      <Buttons onClick={NewQuoteAndAuthor} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}